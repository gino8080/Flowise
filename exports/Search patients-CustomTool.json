{
  "name": "Search patients",
  "description": "Search patients info based on fullname, only name, only surname or fiscal code as input query",
  "color": "linear-gradient(rgb(61,21,120), rgb(63,30,30))",
  "iconSrc": "",
  "schema": "[{\"id\":0,\"property\":\"searchTerm\",\"description\":\"fullname, name, surname or fiscal code\",\"type\":\"string\",\"required\":true}]",
  "func": "const fetch = require('node-fetch');\nconst { get } = require('lodash');\nconsole.log(\"$vars\", $vars);\n\nconst authToken = $vars.authToken;\nconsole.log(\"üöÄ ~ authToken:\", authToken)\nif (!authToken) {\n  console.error(\"authToken is required\");\n  return '';\n}\n\nconst mode = $vars.mode || \"search\";\nconst hospitalizationId = $vars.hospitalizationId || undefined;\nconst patientId = $vars.patientId || undefined;\n\n\nconst mainUrl = \"https://dashboard.polis-net.it/sanita-server/CORE/core-develop/api/web/v1\";\n\nconst getServiceUrl = () => {\n\n  if (hospitalizationId) {\n    //return `${mainUrl}/hospitalization/${hospitalizationId}?expand=person,ward,room,bed,holding_ward`;\n    return `${mainUrl}/pdf/cartella-clinica?idhosp=${hospitalizationId}`;\n  } else if (patientId) {\n    return `${mainUrl}/persons/${patientId}?id=${patientId}&expand=contacts,addresses`;\n  } else {\n\n    return `${mainUrl}/persons?s=${$searchTerm}&pagination=true&page=1&pageSize=1&expand=info,contacts,addresses,hospitalizationRequests,hospitalizationRequests.ward.hospital,infocovid,clinicRequests.clinic.hospital,hospitalizations.ward.hospital&isAdt=false`;\n\n  }\n}\n\nlet url = getServiceUrl() + \"&XDEBUG_SESSION_START=1\";\n\nconsole.log(\"Send mode\", mode, \"to url\", url);\n\nconst options = {\n  \"method\": \"GET\",\n  \"headers\": {\n    'Content-Type': 'application/json',\n    \"authorization\": `Bearer ${authToken}`,\n  },\n}\n\ntry {\n  const response = await fetch(url, options);\n  //console.log(\"üöÄ ~ go ~ response:\", response)\n  const json = await response.json()\n  console.log(\"üöÄ ~ go ~ json:\", json)\n\n\n  const text = createTextSummary(json);\n  console.log(\"üöÄ ~ go ~ text:\", text)\n  return text\n} catch (error) {\n  console.error(error);\n  return '';\n}\n\nfunction createMessageFromData(data) {\n  // Estrazione dei campi necessari\n  const name = data.name || 'N/A';\n  const surname = data.surname || 'N/A';\n  const maritalStatus = data.info?.marital_status?.label || 'N/A';\n  const fiscalCode = data.fiscal_code || 'N/A';\n  const nationality = data.info?.citizenship?.label || 'N/A';\n\n  // Trova la diagnosi nella lista delle ospedalizzazioni\n  let diagnosis = 'N/A';\n  if (data.hospitalizations && data.hospitalizations.length > 0) {\n    const diagnosticDetails = data.hospitalizations[0].details;\n    diagnosis = diagnosticDetails?.admission_diagnostic_report || 'N/A';\n  }\n\n  // Componi il messaggio\n  // Componi il messaggio\n  const message = `Nome: ${name} ${surname}.\\n` +\n    `Stato civile: ${maritalStatus}.\\n` +\n    `Codice fiscale: ${fiscalCode}.\\n` +\n    `Nazionalit√†: ${nationality}.\\n` +\n    `Diagnosi: ${diagnosis}.`;\n\n  return message;\n}\n\n\nfunction createTextSummary(jsonData) {\n  if (!jsonData) {\n    return \"Dati non validi o mancanti.\";\n  }\n\n  const data = jsonData.data;\n  const person = get(data, 'Person') || {};\n  const hospitalization = get(data, 'Hospitalization') || {};\n  const address = get(data, 'Addresses') || [];\n  const city = get(address, 'city') || {};\n  const region = get(city, 'region') || {};\n  const hospital = get(data, 'Ward.orgTree.hospital') || {};\n  const hospitalDetails = get(hospital, 'details') || {};\n\n\n\n  let summary = `Nome: ${get(person, 'name')}\nCognome: ${get(person, 'surname')}\nData di nascita: ${get(person, 'birth_date')}\nGenere: ${get(person, 'gender')}\nCodice fiscale: ${get(person, 'fiscal_code')}\nCitt√† di residenza: ${get(person, 'residence_city')}\nCitt√† di nascita: ${get(person, 'birth_city')}\nNazione di nascita: ${get(person, 'birth_nation')}\nCittadinanza: ${get(person, 'citizenship')}\nStato civile: ${get(person, 'marital_status')}\nTitolo di studio: ${get(person, 'qualification')}\nStato professionale: ${get(person, 'professional_status')}\nRamo di attivit√†: ${get(person, 'activities_branch')}\nPosizione professionale: ${get(person, 'professional_position')}\nASL di residenza: ${get(person, 'residence_asl')}\nCodice ISTAT ASL: ${get(person, 'residence_asl_codistat')}\n\nIndirizzo di residenza:\nVia: ${get(address, 'street')}\nNumero civico: ${get(address, 'street_number')}\nCAP: ${get(address, 'zip')}\nCitt√†: ${get(city, 'location')}\nProvincia: ${get(city, 'province_abbreviation')}\nRegione: ${get(region, 'region')}\n\nInformazioni sul ricovero:\nNumero di letto: ${get(hospitalization, 'bed.name')}\nNumero di stanza: ${get(hospitalization, 'room.name')}\nNumero medico: ${get(hospitalization, 'medical_number')}\nUnit√† operativa di ricovero: ${get(hospitalization, 'unita_operativa_ricovero')}\nData di ingresso: ${get(hospitalization, 'date_in')}\nTipo di ricovero: ${get(hospitalization, 'type.label')}\nStato: ${get(hospitalization, 'status') === 1 ? 'Attivo' : 'Non attivo'}\nRapporto diagnostico di ammissione: ${get(hospitalization, 'admission_diagnostic_report')}\nCreato da: ${get(hospitalization, 'created_by')}\nIndirizzo diagnostico: ${get(hospitalization, 'diagnostic_address')}\n\nOspedale:\nNome: ${get(hospital, 'name')}\nCodice: ${get(hospital, 'code')}\nCitt√†: ${get(hospitalDetails, 'city')}\nRegione: ${get(hospitalDetails, 'nameRegion')}`;\n\n  if (get(data, 'HistoryRecent')) {\n    const historyRecent = get(data, 'HistoryRecent');\n    summary += `\n\nStoria clinica recente:\nDescrizione: ${get(historyRecent, 'description')}\nDettagli:\n- Scala NRS-VAS del dolore: ${get(historyRecent, 'details.standard-nrs-vas')}\n- Localizzazione del dolore: ${get(historyRecent, 'details.localizzazione_dolore')}`;\n  }\n\n  summary += `\n\nNote:\n- Campi con \"N/A\" indicano informazioni non disponibili nel JSON fornito.\n- Non sono presenti informazioni su allergie, terapie, storia familiare, trasferimenti o monitoraggi.`;\n\n  return summary;\n}\n"
}